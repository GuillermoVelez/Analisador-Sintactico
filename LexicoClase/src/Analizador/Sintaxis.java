
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 24 20:40:02 COT 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 24 20:40:02 COT 2021
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\261\000\002\002\004\000\002\002\015\000\002\002" +
    "\014\000\002\002\015\000\002\002\014\000\002\042\004" +
    "\000\002\042\003\000\002\042\004\000\002\042\003\000" +
    "\002\042\004\000\002\042\003\000\002\042\004\000\002" +
    "\042\003\000\002\050\006\000\002\006\011\000\002\006" +
    "\007\000\002\006\011\000\002\006\007\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\041\004\000\002\041\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\011\000" +
    "\002\004\007\000\002\004\011\000\002\004\007\000\002" +
    "\004\011\000\002\004\007\000\002\004\011\000\002\004" +
    "\007\000\002\004\007\000\002\004\011\000\002\004\007" +
    "\000\002\004\011\000\002\004\011\000\002\004\007\000" +
    "\002\004\011\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\011\000\002\004" +
    "\011\000\002\004\006\000\002\004\006\000\002\004\007" +
    "\000\002\004\010\000\002\004\010\000\002\004\005\000" +
    "\002\004\010\000\002\004\012\000\002\004\012\000\002" +
    "\004\012\000\002\011\007\000\002\010\011\000\002\033" +
    "\003\000\002\033\003\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\006\000\002" +
    "\033\007\000\002\031\011\000\002\014\013\000\002\032" +
    "\011\000\002\035\006\000\002\035\006\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\040\010\000\002\040\010\000\002\040" +
    "\012\000\002\040\010\000\002\040\012\000\002\040\010" +
    "\000\002\040\012\000\002\040\010\000\002\040\012\000" +
    "\002\040\010\000\002\040\012\000\002\040\012\000\002" +
    "\040\012\000\002\040\010\000\002\040\010\000\002\021" +
    "\016\000\002\036\004\000\002\036\003\000\002\037\010" +
    "\000\002\020\010\000\002\007\006\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\025\005\000\002" +
    "\026\004\000\002\026\003\000\002\043\004\000\002\043" +
    "\006\000\002\043\003\000\002\043\005\000\002\024\005" +
    "\000\002\027\004\000\002\027\003\000\002\030\004\000" +
    "\002\030\003\000\002\022\006\000\002\044\004\000\002" +
    "\044\003\000\002\045\004\000\002\045\006\000\002\045" +
    "\003\000\002\045\005\000\002\023\006\000\002\046\004" +
    "\000\002\046\003\000\002\047\004\000\002\047\003\000" +
    "\002\051\011\000\002\034\012\000\002\034\012\000\002" +
    "\034\012\000\002\034\012\000\002\034\012\000\002\034" +
    "\012\000\002\034\012\000\002\034\011\000\002\005\005" +
    "\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c9\000\010\030\010\077\007\107\012\001\002\000" +
    "\014\015\ufff9\030\ufff9\063\ufff9\077\ufff9\107\ufff9\001\002" +
    "\000\014\015\ufff7\030\ufff7\063\ufff7\077\ufff7\107\ufff7\001" +
    "\002\000\004\002\u01cb\001\002\000\006\100\u01b3\101\u01b4" +
    "\001\002\000\004\067\u01ac\001\002\000\014\015\022\030" +
    "\010\063\023\077\007\107\012\001\002\000\004\110\015" +
    "\001\002\000\014\015\ufff5\030\ufff5\063\ufff5\077\ufff5\107" +
    "\ufff5\001\002\000\014\015\ufffb\030\ufffb\063\ufffb\077\ufffb" +
    "\107\ufffb\001\002\000\004\067\016\001\002\000\004\064" +
    "\017\001\002\000\014\015\ufff4\030\ufff4\063\ufff4\077\ufff4" +
    "\107\ufff4\001\002\000\014\015\ufffa\030\ufffa\063\ufffa\077" +
    "\ufffa\107\ufffa\001\002\000\014\015\ufff8\030\ufff8\063\ufff8" +
    "\077\ufff8\107\ufff8\001\002\000\004\063\u01a0\001\002\000" +
    "\004\055\026\001\002\000\014\015\ufff6\030\ufff6\063\ufff6" +
    "\077\ufff6\107\ufff6\001\002\000\014\015\ufffc\030\ufffc\063" +
    "\ufffc\077\ufffc\107\ufffc\001\002\000\004\056\027\001\002" +
    "\000\004\057\030\001\002\000\062\006\037\007\050\010" +
    "\036\012\060\013\044\014\052\015\046\016\034\017\075" +
    "\020\051\021\057\023\065\024\035\027\043\030\072\031" +
    "\063\041\055\042\074\067\071\071\054\072\066\073\073" +
    "\074\042\111\031\001\002\000\004\055\u019a\001\002\000" +
    "\070\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\023\uffea\024" +
    "\uffea\025\uffea\027\uffea\030\uffea\031\uffea\037\uffea\041\uffea" +
    "\042\uffea\060\uffea\067\uffea\071\uffea\072\uffea\073\uffea\074" +
    "\uffea\111\uffea\001\002\000\070\006\uffd6\007\uffd6\010\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\037\uffd6\041\uffd6\042\uffd6\060\uffd6\067\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\111\uffd6\001\002\000\004" +
    "\067\u0192\001\002\000\004\067\u018a\001\002\000\004\055" +
    "\u0184\001\002\000\006\053\u0171\067\u0172\001\002\000\064" +
    "\006\037\007\050\010\036\012\060\013\044\014\052\015" +
    "\046\016\034\017\075\020\051\021\057\023\065\024\035" +
    "\027\043\030\072\031\254\037\u016a\041\055\042\074\067" +
    "\071\071\054\072\066\073\073\074\042\111\031\001\002" +
    "\000\070\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\037\uffe6\041" +
    "\uffe6\042\uffe6\060\uffe6\067\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\111\uffe6\001\002\000\006\005\u0161\067\u0163\001" +
    "\002\000\004\067\u0158\001\002\000\004\055\u0152\001\002" +
    "\000\070\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\037\uffe2\041" +
    "\uffe2\042\uffe2\060\uffe2\067\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\111\uffe2\001\002\000\004\067\u014d\001\002\000" +
    "\072\006\uffec\007\uffec\010\uffec\011\262\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\023" +
    "\uffec\024\uffec\025\uffec\027\uffec\030\uffec\031\uffec\037\uffec" +
    "\041\uffec\042\uffec\060\uffec\067\uffec\071\uffec\072\uffec\073" +
    "\uffec\074\uffec\111\uffec\001\002\000\004\067\u013d\001\002" +
    "\000\004\067\u0135\001\002\000\004\055\352\001\002\000" +
    "\070\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\037\uffd4\041\uffd4" +
    "\042\uffd4\060\uffd4\067\uffd4\071\uffd4\072\uffd4\073\uffd4\074" +
    "\uffd4\111\uffd4\001\002\000\006\005\217\067\220\001\002" +
    "\000\004\055\322\001\002\000\070\006\uffda\007\uffda\010" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda\027\uffda\030" +
    "\uffda\031\uffda\037\uffda\041\uffda\042\uffda\060\uffda\067\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\111\uffda\001\002\000" +
    "\004\067\313\001\002\000\004\057\240\001\002\000\070" +
    "\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\027\uffd8\030\uffd8\031\uffd8\037\uffd8\041\uffd8\042" +
    "\uffd8\060\uffd8\067\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8" +
    "\111\uffd8\001\002\000\070\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\037\uffe0\041\uffe0\042\uffe0\060\uffe0\067\uffe0\071\uffe0" +
    "\072\uffe0\073\uffe0\074\uffe0\111\uffe0\001\002\000\004\064" +
    "\237\001\002\000\070\006\uffee\007\uffee\010\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\023\uffee\024\uffee\025\uffee\027\uffee\030\uffee\031\uffee" +
    "\037\uffee\041\uffee\042\uffee\060\uffee\067\uffee\071\uffee\072" +
    "\uffee\073\uffee\074\uffee\111\uffee\001\002\000\004\067\227" +
    "\001\002\000\004\067\213\001\002\000\070\006\uffdc\007" +
    "\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\037\uffdc\041\uffdc\042\uffdc\060\uffdc" +
    "\067\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\111\uffdc\001" +
    "\002\000\070\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\037\uffe8" +
    "\041\uffe8\042\uffe8\060\uffe8\067\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\111\uffe8\001\002\000\010\043\155\065\153" +
    "\067\154\001\002\000\004\067\150\001\002\000\004\067" +
    "\144\001\002\000\026\006\110\007\107\015\112\016\115" +
    "\017\114\020\104\021\111\023\105\024\106\027\113\001" +
    "\002\000\004\067\077\001\002\000\070\006\uffe4\007\uffe4" +
    "\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\037\uffe4\041\uffe4\042\uffe4\060\uffe4\067" +
    "\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\111\uffe4\001\002" +
    "\000\006\043\101\064\100\001\002\000\070\006\uffcb\007" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\037\uffcb\041\uffcb\042\uffcb\060\uffcb" +
    "\067\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\111\uffcb\001" +
    "\002\000\004\054\102\001\002\000\004\064\103\001\002" +
    "\000\070\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\037\uffbe\041" +
    "\uffbe\042\uffbe\060\uffbe\067\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\111\uffbe\001\002\000\004\067\140\001\002\000" +
    "\004\067\136\001\002\000\004\067\134\001\002\000\004" +
    "\067\132\001\002\000\004\067\130\001\002\000\004\067" +
    "\126\001\002\000\004\067\124\001\002\000\004\067\122" +
    "\001\002\000\004\067\120\001\002\000\004\067\116\001" +
    "\002\000\004\064\117\001\002\000\070\006\uff95\007\uff95" +
    "\010\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\023\uff95\024\uff95\025\uff95\027\uff95" +
    "\030\uff95\031\uff95\037\uff95\041\uff95\042\uff95\060\uff95\067" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\111\uff95\001\002" +
    "\000\004\064\121\001\002\000\070\006\uff8e\007\uff8e\010" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\023\uff8e\024\uff8e\025\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\037\uff8e\041\uff8e\042\uff8e\060\uff8e\067\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\074\uff8e\111\uff8e\001\002\000" +
    "\004\064\123\001\002\000\070\006\uff94\007\uff94\010\uff94" +
    "\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\023\uff94\024\uff94\025\uff94\027\uff94\030\uff94" +
    "\031\uff94\037\uff94\041\uff94\042\uff94\060\uff94\067\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\111\uff94\001\002\000\004" +
    "\064\125\001\002\000\070\006\uff96\007\uff96\010\uff96\012" +
    "\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\023\uff96\024\uff96\025\uff96\027\uff96\030\uff96\031" +
    "\uff96\037\uff96\041\uff96\042\uff96\060\uff96\067\uff96\071\uff96" +
    "\072\uff96\073\uff96\074\uff96\111\uff96\001\002\000\004\064" +
    "\127\001\002\000\070\006\uff90\007\uff90\010\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\023\uff90\024\uff90\025\uff90\027\uff90\030\uff90\031\uff90" +
    "\037\uff90\041\uff90\042\uff90\060\uff90\067\uff90\071\uff90\072" +
    "\uff90\073\uff90\074\uff90\111\uff90\001\002\000\004\064\131" +
    "\001\002\000\070\006\uff8d\007\uff8d\010\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\027\uff8d\030\uff8d\031\uff8d\037" +
    "\uff8d\041\uff8d\042\uff8d\060\uff8d\067\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\111\uff8d\001\002\000\004\064\133\001" +
    "\002\000\070\006\uff8f\007\uff8f\010\uff8f\012\uff8f\013\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\027\uff8f\030\uff8f\031\uff8f\037\uff8f" +
    "\041\uff8f\042\uff8f\060\uff8f\067\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\074\uff8f\111\uff8f\001\002\000\004\064\135\001\002" +
    "\000\070\006\uff93\007\uff93\010\uff93\012\uff93\013\uff93\014" +
    "\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\023\uff93" +
    "\024\uff93\025\uff93\027\uff93\030\uff93\031\uff93\037\uff93\041" +
    "\uff93\042\uff93\060\uff93\067\uff93\071\uff93\072\uff93\073\uff93" +
    "\074\uff93\111\uff93\001\002\000\004\064\137\001\002\000" +
    "\070\006\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\023\uff92\024" +
    "\uff92\025\uff92\027\uff92\030\uff92\031\uff92\037\uff92\041\uff92" +
    "\042\uff92\060\uff92\067\uff92\071\uff92\072\uff92\073\uff92\074" +
    "\uff92\111\uff92\001\002\000\004\064\141\001\002\000\070" +
    "\006\uff91\007\uff91\010\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\023\uff91\024\uff91" +
    "\025\uff91\027\uff91\030\uff91\031\uff91\037\uff91\041\uff91\042" +
    "\uff91\060\uff91\067\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\111\uff91\001\002\000\006\064\146\067\144\001\002\000" +
    "\006\064\uff6b\067\uff6b\001\002\000\010\064\uff69\067\uff69" +
    "\106\145\001\002\000\006\064\uff6a\067\uff6a\001\002\000" +
    "\070\006\uff6d\007\uff6d\010\uff6d\012\uff6d\013\uff6d\014\uff6d" +
    "\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\023\uff6d\024" +
    "\uff6d\025\uff6d\027\uff6d\030\uff6d\031\uff6d\037\uff6d\041\uff6d" +
    "\042\uff6d\060\uff6d\067\uff6d\071\uff6d\072\uff6d\073\uff6d\074" +
    "\uff6d\111\uff6d\001\002\000\006\064\uff6c\067\uff6c\001\002" +
    "\000\004\067\151\001\002\000\004\064\152\001\002\000" +
    "\070\006\uffb0\007\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\037\uffb0\041\uffb0" +
    "\042\uffb0\060\uffb0\067\uffb0\071\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\111\uffb0\001\002\000\004\067\173\001\002\000\004" +
    "\064\172\001\002\000\010\005\157\070\160\075\156\001" +
    "\002\000\004\064\171\001\002\000\006\005\164\067\165" +
    "\001\002\000\004\067\161\001\002\000\004\070\162\001" +
    "\002\000\004\064\163\001\002\000\070\006\uffac\007\uffac" +
    "\010\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025\uffac\027\uffac" +
    "\030\uffac\031\uffac\037\uffac\041\uffac\042\uffac\060\uffac\067" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\111\uffac\001\002" +
    "\000\004\064\170\001\002\000\004\005\166\001\002\000" +
    "\004\064\167\001\002\000\070\006\uffad\007\uffad\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030\uffad" +
    "\031\uffad\037\uffad\041\uffad\042\uffad\060\uffad\067\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\111\uffad\001\002\000\070" +
    "\006\uffae\007\uffae\010\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\037\uffae\041\uffae\042" +
    "\uffae\060\uffae\067\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\111\uffae\001\002\000\070\006\uffaf\007\uffaf\010\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\037\uffaf\041\uffaf\042\uffaf\060\uffaf\067\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\111\uffaf\001\002\000\070\006" +
    "\uffab\007\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\025" +
    "\uffab\027\uffab\030\uffab\031\uffab\037\uffab\041\uffab\042\uffab" +
    "\060\uffab\067\uffab\071\uffab\072\uffab\073\uffab\074\uffab\111" +
    "\uffab\001\002\000\004\043\174\001\002\000\010\005\176" +
    "\070\177\075\175\001\002\000\006\064\206\065\207\001" +
    "\002\000\004\067\203\001\002\000\004\067\200\001\002" +
    "\000\004\070\201\001\002\000\004\064\202\001\002\000" +
    "\070\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8\037\uffa8\041\uffa8" +
    "\042\uffa8\060\uffa8\067\uffa8\071\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\111\uffa8\001\002\000\004\005\204\001\002\000\004" +
    "\064\205\001\002\000\070\006\uffa7\007\uffa7\010\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\037\uffa7\041\uffa7\042\uffa7\060\uffa7\067\uffa7\071\uffa7" +
    "\072\uffa7\073\uffa7\074\uffa7\111\uffa7\001\002\000\070\006" +
    "\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\037\uffaa\041\uffaa\042\uffaa" +
    "\060\uffaa\067\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\111" +
    "\uffaa\001\002\000\004\075\210\001\002\000\004\064\211" +
    "\001\002\000\070\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\037" +
    "\uffa9\041\uffa9\042\uffa9\060\uffa9\067\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\111\uffa9\001\002\000\010\005\217\056" +
    "\216\067\220\001\002\000\012\005\uff5d\056\uff5d\066\215" +
    "\067\uff5d\001\002\000\010\005\uff5f\056\uff5f\067\uff5f\001" +
    "\002\000\010\005\uff5e\056\uff5e\067\uff5e\001\002\000\004" +
    "\064\226\001\002\000\004\067\223\001\002\000\012\005" +
    "\uff63\056\uff63\066\222\067\uff63\001\002\000\010\005\uff60" +
    "\056\uff60\067\uff60\001\002\000\010\005\uff65\056\uff65\067" +
    "\uff65\001\002\000\004\005\224\001\002\000\012\005\uff62" +
    "\056\uff62\066\225\067\uff62\001\002\000\010\005\uff64\056" +
    "\uff64\067\uff64\001\002\000\070\006\uff61\007\uff61\010\uff61" +
    "\012\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020" +
    "\uff61\021\uff61\023\uff61\024\uff61\025\uff61\027\uff61\030\uff61" +
    "\031\uff61\037\uff61\041\uff61\042\uff61\060\uff61\067\uff61\071" +
    "\uff61\072\uff61\073\uff61\074\uff61\111\uff61\001\002\000\006" +
    "\043\231\064\230\001\002\000\070\006\uffc9\007\uffc9\010" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\037\uffc9\041\uffc9\042\uffc9\060\uffc9\067\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\111\uffc9\001\002\000" +
    "\004\075\232\001\002\000\006\064\233\065\234\001\002" +
    "\000\070\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\037\uffbb\041" +
    "\uffbb\042\uffbb\060\uffbb\067\uffbb\071\uffbb\072\uffbb\073\uffbb" +
    "\074\uffbb\111\uffbb\001\002\000\004\075\235\001\002\000" +
    "\004\064\236\001\002\000\070\006\uffba\007\uffba\010\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba" +
    "\031\uffba\037\uffba\041\uffba\042\uffba\060\uffba\067\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\111\uffba\001\002\000\070" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde" +
    "\025\uffde\027\uffde\030\uffde\031\uffde\037\uffde\041\uffde\042" +
    "\uffde\060\uffde\067\uffde\071\uffde\072\uffde\073\uffde\074\uffde" +
    "\111\uffde\001\002\000\062\006\037\007\050\010\036\012" +
    "\060\013\044\014\052\015\046\016\034\017\075\020\051" +
    "\021\057\023\065\024\035\027\043\030\072\031\063\041" +
    "\055\042\074\067\071\071\054\072\066\073\073\074\042" +
    "\111\031\001\002\000\064\006\037\007\050\010\036\012" +
    "\060\013\044\014\052\015\046\016\034\017\075\020\051" +
    "\021\057\023\065\024\035\027\043\030\072\031\254\041" +
    "\055\042\074\060\243\067\071\071\054\072\066\073\073" +
    "\074\042\111\031\001\002\000\070\006\uffeb\007\uffeb\010" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\037\uffeb\041\uffeb\042\uffeb\060\uffeb\067\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\074\uffeb\111\uffeb\001\002\000" +
    "\004\013\266\001\002\000\070\006\uffd7\007\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\037\uffd7\041\uffd7\042\uffd7\060\uffd7\067\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\111\uffd7\001\002\000\070" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\027\uffe7\030\uffe7\031\uffe7\037\uffe7\041\uffe7\042" +
    "\uffe7\060\uffe7\067\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\111\uffe7\001\002\000\070\006\uffe3\007\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\037\uffe3\041\uffe3\042\uffe3\060\uffe3\067\uffe3\071\uffe3" +
    "\072\uffe3\073\uffe3\074\uffe3\111\uffe3\001\002\000\072\006" +
    "\uffed\007\uffed\010\uffed\011\262\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\023\uffed\024" +
    "\uffed\025\uffed\027\uffed\030\uffed\031\uffed\037\uffed\041\uffed" +
    "\042\uffed\060\uffed\067\uffed\071\uffed\072\uffed\073\uffed\074" +
    "\uffed\111\uffed\001\002\000\070\006\uffd5\007\uffd5\010\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\037\uffd5\041\uffd5\042\uffd5\060\uffd5\067\uffd5\071" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\111\uffd5\001\002\000\070" +
    "\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\027\uffdb\030\uffdb\031\uffdb\037\uffdb\041\uffdb\042" +
    "\uffdb\060\uffdb\067\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\111\uffdb\001\002\000\070\006\uffd9\007\uffd9\010\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\037\uffd9\041\uffd9\042\uffd9\060\uffd9\067\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\111\uffd9\001\002\000\070\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\037\uffe1\041\uffe1\042\uffe1" +
    "\060\uffe1\067\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\111" +
    "\uffe1\001\002\000\004\064\261\001\002\000\070\006\uffef" +
    "\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\023\uffef\024\uffef\025\uffef" +
    "\027\uffef\030\uffef\031\uffef\037\uffef\041\uffef\042\uffef\060" +
    "\uffef\067\uffef\071\uffef\072\uffef\073\uffef\074\uffef\111\uffef" +
    "\001\002\000\070\006\uffdd\007\uffdd\010\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\037" +
    "\uffdd\041\uffdd\042\uffdd\060\uffdd\067\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\111\uffdd\001\002\000\070\006\uffe9\007" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\037\uffe9\041\uffe9\042\uffe9\060\uffe9" +
    "\067\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\111\uffe9\001" +
    "\002\000\070\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\037\uffe5" +
    "\041\uffe5\042\uffe5\060\uffe5\067\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\111\uffe5\001\002\000\070\006\uffdf\007\uffdf" +
    "\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\037\uffdf\041\uffdf\042\uffdf\060\uffdf\067" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\111\uffdf\001\002" +
    "\000\004\057\263\001\002\000\062\006\037\007\050\010" +
    "\036\012\060\013\044\014\052\015\046\016\034\017\075" +
    "\020\051\021\057\023\065\024\035\027\043\030\072\031" +
    "\063\041\055\042\074\067\071\071\054\072\066\073\073" +
    "\074\042\111\031\001\002\000\064\006\037\007\050\010" +
    "\036\012\060\013\044\014\052\015\046\016\034\017\075" +
    "\020\051\021\057\023\065\024\035\027\043\030\072\031" +
    "\254\041\055\042\074\060\265\067\071\071\054\072\066" +
    "\073\073\074\042\111\031\001\002\000\070\006\uffa6\007" +
    "\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\023\uffa6\024\uffa6\025\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\037\uffa6\041\uffa6\042\uffa6\060\uffa6" +
    "\067\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\111\uffa6\001" +
    "\002\000\004\055\267\001\002\000\006\054\271\067\272" +
    "\001\002\000\004\056\311\001\002\000\006\056\uffa3\064" +
    "\uffa3\001\002\000\014\051\275\056\uffa4\064\uffa4\102\273" +
    "\103\274\001\002\000\006\067\310\075\307\001\002\000" +
    "\006\067\306\075\305\001\002\000\012\005\277\054\300" +
    "\067\301\075\276\001\002\000\006\056\uff9d\064\uff9d\001" +
    "\002\000\006\005\302\067\303\001\002\000\006\056\uffa2" +
    "\064\uffa2\001\002\000\006\056\uff9c\064\uff9c\001\002\000" +
    "\006\056\uff9b\064\uff9b\001\002\000\004\005\304\001\002" +
    "\000\006\056\uff9a\064\uff9a\001\002\000\006\056\uffa1\064" +
    "\uffa1\001\002\000\006\056\uff9f\064\uff9f\001\002\000\006" +
    "\056\uffa0\064\uffa0\001\002\000\006\056\uff9e\064\uff9e\001" +
    "\002\000\004\064\312\001\002\000\070\006\uff98\007\uff98" +
    "\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\023\uff98\024\uff98\025\uff98\027\uff98" +
    "\030\uff98\031\uff98\037\uff98\041\uff98\042\uff98\060\uff98\067" +
    "\uff98\071\uff98\072\uff98\073\uff98\074\uff98\111\uff98\001\002" +
    "\000\006\043\315\064\314\001\002\000\070\006\uffd0\007" +
    "\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\037\uffd0\041\uffd0\042\uffd0\060\uffd0" +
    "\067\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\111\uffd0\001" +
    "\002\000\004\070\316\001\002\000\004\067\317\001\002" +
    "\000\004\070\320\001\002\000\004\064\321\001\002\000" +
    "\070\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\037\uffc5\041\uffc5" +
    "\042\uffc5\060\uffc5\067\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\111\uffc5\001\002\000\004\067\323\001\002\000\004" +
    "\056\324\001\002\000\004\057\325\001\002\000\004\026" +
    "\326\001\002\000\004\075\340\001\002\000\006\026\326" +
    "\032\331\001\002\000\006\026\uff7b\032\uff7b\001\002\000" +
    "\004\104\333\001\002\000\006\026\uff7c\032\uff7c\001\002" +
    "\000\062\006\037\007\050\010\036\012\060\013\044\014" +
    "\052\015\046\016\034\017\075\020\051\021\057\023\065" +
    "\024\035\027\043\030\072\031\063\041\055\042\074\067" +
    "\071\071\054\072\066\073\073\074\042\111\031\001\002" +
    "\000\064\006\037\007\050\010\036\012\060\013\044\014" +
    "\052\015\046\016\034\017\075\020\051\021\057\023\065" +
    "\024\035\025\335\027\043\030\072\031\254\041\055\042" +
    "\074\067\071\071\054\072\066\073\073\074\042\111\031" +
    "\001\002\000\004\064\336\001\002\000\004\060\337\001" +
    "\002\000\070\006\uff7d\007\uff7d\010\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\027\uff7d\030\uff7d\031\uff7d\037\uff7d" +
    "\041\uff7d\042\uff7d\060\uff7d\067\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\111\uff7d\001\002\000\004\104\341\001\002" +
    "\000\062\006\037\007\050\010\036\012\060\013\044\014" +
    "\052\015\046\016\034\017\075\020\051\021\057\023\065" +
    "\024\035\027\043\030\072\031\063\041\055\042\074\067" +
    "\071\071\054\072\066\073\073\074\042\111\031\001\002" +
    "\000\064\006\037\007\050\010\036\012\060\013\044\014" +
    "\052\015\046\016\034\017\075\020\051\021\057\023\065" +
    "\024\035\025\343\027\043\030\072\031\254\041\055\042" +
    "\074\067\071\071\054\072\066\073\073\074\042\111\031" +
    "\001\002\000\004\064\344\001\002\000\006\026\uff7a\032" +
    "\uff7a\001\002\000\010\005\217\056\347\067\220\001\002" +
    "\000\010\005\uff66\056\uff66\067\uff66\001\002\000\004\064" +
    "\351\001\002\000\010\005\uff67\056\uff67\067\uff67\001\002" +
    "\000\070\006\uff68\007\uff68\010\uff68\012\uff68\013\uff68\014" +
    "\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68\023\uff68" +
    "\024\uff68\025\uff68\027\uff68\030\uff68\031\uff68\037\uff68\041" +
    "\uff68\042\uff68\060\uff68\067\uff68\071\uff68\072\uff68\073\uff68" +
    "\074\uff68\111\uff68\001\002\000\022\006\357\015\360\016" +
    "\363\020\354\023\353\024\356\027\361\067\362\001\002" +
    "\000\004\067\u012e\001\002\000\004\067\u0127\001\002\000" +
    "\004\056\u0123\001\002\000\004\067\u011c\001\002\000\004" +
    "\067\u0115\001\002\000\004\067\u010e\001\002\000\004\067" +
    "\u0107\001\002\000\004\043\u0101\001\002\000\004\067\364" +
    "\001\002\000\004\043\365\001\002\000\004\075\366\001" +
    "\002\000\004\064\367\001\002\000\006\054\271\067\272" +
    "\001\002\000\004\064\371\001\002\000\006\053\373\067" +
    "\374\001\002\000\004\056\uff5a\001\002\000\004\067\u0100" +
    "\001\002\000\006\052\375\053\376\001\002\000\004\075" +
    "\377\001\002\000\004\056\uff52\001\002\000\004\056\uff53" +
    "\001\002\000\004\056\uff51\001\002\000\004\075\u0102\001" +
    "\002\000\004\064\u0103\001\002\000\006\054\271\067\272" +
    "\001\002\000\004\064\u0105\001\002\000\006\053\373\067" +
    "\374\001\002\000\004\056\uff54\001\002\000\004\043\u0108" +
    "\001\002\000\004\075\u0109\001\002\000\004\064\u010a\001" +
    "\002\000\006\054\271\067\272\001\002\000\004\064\u010c" +
    "\001\002\000\006\053\373\067\374\001\002\000\004\056" +
    "\uff59\001\002\000\004\043\u010f\001\002\000\004\075\u0110" +
    "\001\002\000\004\064\u0111\001\002\000\006\054\271\067" +
    "\272\001\002\000\004\064\u0113\001\002\000\006\053\373" +
    "\067\374\001\002\000\004\056\uff5b\001\002\000\004\043" +
    "\u0116\001\002\000\004\075\u0117\001\002\000\004\064\u0118" +
    "\001\002\000\006\054\271\067\272\001\002\000\004\064" +
    "\u011a\001\002\000\006\053\373\067\374\001\002\000\004" +
    "\056\uff55\001\002\000\004\043\u011d\001\002\000\004\075" +
    "\u011e\001\002\000\004\064\u011f\001\002\000\006\054\271" +
    "\067\272\001\002\000\004\064\u0121\001\002\000\006\053" +
    "\373\067\374\001\002\000\004\056\uff58\001\002\000\004" +
    "\057\u0124\001\002\000\062\006\037\007\050\010\036\012" +
    "\060\013\044\014\052\015\046\016\034\017\075\020\051" +
    "\021\057\023\065\024\035\027\043\030\072\031\063\041" +
    "\055\042\074\067\071\071\054\072\066\073\073\074\042" +
    "\111\031\001\002\000\064\006\037\007\050\010\036\012" +
    "\060\013\044\014\052\015\046\016\034\017\075\020\051" +
    "\021\057\023\065\024\035\027\043\030\072\031\254\041" +
    "\055\042\074\060\u0126\067\071\071\054\072\066\073\073" +
    "\074\042\111\031\001\002\000\070\006\uff97\007\uff97\010" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\023\uff97\024\uff97\025\uff97\027\uff97\030" +
    "\uff97\031\uff97\037\uff97\041\uff97\042\uff97\060\uff97\067\uff97" +
    "\071\uff97\072\uff97\073\uff97\074\uff97\111\uff97\001\002\000" +
    "\004\043\u0128\001\002\000\004\075\u0129\001\002\000\004" +
    "\064\u012a\001\002\000\006\054\271\067\272\001\002\000" +
    "\004\064\u012c\001\002\000\006\053\373\067\374\001\002" +
    "\000\004\056\uff56\001\002\000\004\043\u012f\001\002\000" +
    "\004\075\u0130\001\002\000\004\064\u0131\001\002\000\006" +
    "\054\271\067\272\001\002\000\004\064\u0133\001\002\000" +
    "\006\053\373\067\374\001\002\000\004\056\uff57\001\002" +
    "\000\006\043\u0137\064\u0136\001\002\000\070\006\uffce\007" +
    "\uffce\010\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce\025\uffce\027" +
    "\uffce\030\uffce\031\uffce\037\uffce\041\uffce\042\uffce\060\uffce" +
    "\067\uffce\071\uffce\072\uffce\073\uffce\074\uffce\111\uffce\001" +
    "\002\000\004\075\u0138\001\002\000\006\064\u0139\065\u013a" +
    "\001\002\000\070\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\037" +
    "\uffc2\041\uffc2\042\uffc2\060\uffc2\067\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\111\uffc2\001\002\000\004\075\u013b\001" +
    "\002\000\004\064\u013c\001\002\000\070\006\uffc1\007\uffc1" +
    "\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\037\uffc1\041\uffc1\042\uffc1\060\uffc1\067" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\111\uffc1\001\002" +
    "\000\010\043\u0140\052\u013e\064\u013f\001\002\000\004\005" +
    "\u0147\001\002\000\070\006\uffcc\007\uffcc\010\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\060\uffcc\067\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\111\uffcc\001\002\000\004\005\u0141" +
    "\001\002\000\006\005\u0142\067\u0143\001\002\000\004\064" +
    "\u0146\001\002\000\004\005\u0144\001\002\000\004\064\u0145" +
    "\001\002\000\070\006\uffb1\007\uffb1\010\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\037" +
    "\uffb1\041\uffb1\042\uffb1\060\uffb1\067\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\111\uffb1\001\002\000\070\006\uffb3\007" +
    "\uffb3\010\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\037\uffb3\041\uffb3\042\uffb3\060\uffb3" +
    "\067\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\111\uffb3\001" +
    "\002\000\006\005\u0148\067\u0149\001\002\000\004\064\u014c" +
    "\001\002\000\004\005\u014a\001\002\000\004\064\u014b\001" +
    "\002\000\070\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\037\uffb2" +
    "\041\uffb2\042\uffb2\060\uffb2\067\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\111\uffb2\001\002\000\070\006\uffb4\007\uffb4" +
    "\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\037\uffb4\041\uffb4\042\uffb4\060\uffb4\067" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\111\uffb4\001\002" +
    "\000\006\043\u014f\064\u014e\001\002\000\070\006\uffd1\007" +
    "\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\037\uffd1\041\uffd1\042\uffd1\060\uffd1" +
    "\067\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\111\uffd1\001" +
    "\002\000\004\075\u0150\001\002\000\004\064\u0151\001\002" +
    "\000\070\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\060\uffc6\067\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\111\uffc6\001\002\000\006\054\271\067\272\001" +
    "\002\000\004\056\u0154\001\002\000\004\057\u0155\001\002" +
    "\000\062\006\037\007\050\010\036\012\060\013\044\014" +
    "\052\015\046\016\034\017\075\020\051\021\057\023\065" +
    "\024\035\027\043\030\072\031\063\041\055\042\074\067" +
    "\071\071\054\072\066\073\073\074\042\111\031\001\002" +
    "\000\064\006\037\007\050\010\036\012\060\013\044\014" +
    "\052\015\046\016\034\017\075\020\051\021\057\023\065" +
    "\024\035\027\043\030\072\031\254\041\055\042\074\060" +
    "\u0157\067\071\071\054\072\066\073\073\074\042\111\031" +
    "\001\002\000\070\006\uff99\007\uff99\010\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99" +
    "\023\uff99\024\uff99\025\uff99\027\uff99\030\uff99\031\uff99\037" +
    "\uff99\041\uff99\042\uff99\060\uff99\067\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\111\uff99\001\002\000\006\043\u015a\064" +
    "\u0159\001\002\000\070\006\uffcd\007\uffcd\010\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\037\uffcd\041\uffcd\042\uffcd\060\uffcd\067\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\111\uffcd\001\002\000\004\075\u015b" +
    "\001\002\000\006\064\u015c\065\u015d\001\002\000\070\006" +
    "\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\037\uffc0\041\uffc0\042\uffc0" +
    "\060\uffc0\067\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\111" +
    "\uffc0\001\002\000\004\075\u015e\001\002\000\004\064\u015f" +
    "\001\002\000\070\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\037" +
    "\uffbf\041\uffbf\042\uffbf\060\uffbf\067\uffbf\071\uffbf\072\uffbf" +
    "\073\uffbf\074\uffbf\111\uffbf\001\002\000\010\005\uff72\064" +
    "\uff72\067\uff72\001\002\000\004\067\u0167\001\002\000\010" +
    "\005\u0161\064\u0166\067\u0163\001\002\000\012\005\uff6f\064" +
    "\uff6f\067\uff6f\105\u0164\001\002\000\010\005\uff71\064\uff71" +
    "\067\uff71\001\002\000\010\005\uff73\064\uff73\067\uff73\001" +
    "\002\000\070\006\uff74\007\uff74\010\uff74\012\uff74\013\uff74" +
    "\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\023" +
    "\uff74\024\uff74\025\uff74\027\uff74\030\uff74\031\uff74\037\uff74" +
    "\041\uff74\042\uff74\060\uff74\067\uff74\071\uff74\072\uff74\073" +
    "\uff74\074\uff74\111\uff74\001\002\000\004\005\u0168\001\002" +
    "\000\012\005\uff6e\064\uff6e\067\uff6e\105\u0169\001\002\000" +
    "\010\005\uff70\064\uff70\067\uff70\001\002\000\006\067\u016c" +
    "\075\u016b\001\002\000\004\064\u016f\001\002\000\004\064" +
    "\u016d\001\002\000\004\060\u016e\001\002\000\004\002\ufffd" +
    "\001\002\000\004\060\u0170\001\002\000\004\002\uffff\001" +
    "\002\000\004\067\u0182\001\002\000\012\043\u0176\052\u0173" +
    "\053\u0175\064\u0174\001\002\000\004\075\u017d\001\002\000" +
    "\070\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\037\uffc8\041\uffc8" +
    "\042\uffc8\060\uffc8\067\uffc8\071\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\111\uffc8\001\002\000\004\064\u017c\001\002\000\004" +
    "\075\u0177\001\002\000\006\064\u0178\065\u0179\001\002\000" +
    "\070\006\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\037\uffb8\041\uffb8" +
    "\042\uffb8\060\uffb8\067\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\111\uffb8\001\002\000\004\075\u017a\001\002\000\004" +
    "\064\u017b\001\002\000\070\006\uffb7\007\uffb7\010\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\037\uffb7\041\uffb7\042\uffb7\060\uffb7\067\uffb7\071\uffb7" +
    "\072\uffb7\073\uffb7\074\uffb7\111\uffb7\001\002\000\070\006" +
    "\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\037\uffb6\041\uffb6\042\uffb6" +
    "\060\uffb6\067\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\111" +
    "\uffb6\001\002\000\006\064\u017e\065\u017f\001\002\000\070" +
    "\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\027\uffc7\030\uffc7\031\uffc7\037\uffc7\041\uffc7\042" +
    "\uffc7\060\uffc7\067\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\111\uffc7\001\002\000\004\075\u0180\001\002\000\004\064" +
    "\u0181\001\002\000\070\006\uffb9\007\uffb9\010\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\037\uffb9\041\uffb9\042\uffb9\060\uffb9\067\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\074\uffb9\111\uffb9\001\002\000\004\064\u0183" +
    "\001\002\000\070\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\037" +
    "\uffb5\041\uffb5\042\uffb5\060\uffb5\067\uffb5\071\uffb5\072\uffb5" +
    "\073\uffb5\074\uffb5\111\uffb5\001\002\000\006\054\271\067" +
    "\272\001\002\000\004\056\u0186\001\002\000\004\057\u0187" +
    "\001\002\000\062\006\037\007\050\010\036\012\060\013" +
    "\044\014\052\015\046\016\034\017\075\020\051\021\057" +
    "\023\065\024\035\027\043\030\072\031\063\041\055\042" +
    "\074\067\071\071\054\072\066\073\073\074\042\111\031" +
    "\001\002\000\064\006\037\007\050\010\036\012\060\013" +
    "\044\014\052\015\046\016\034\017\075\020\051\021\057" +
    "\023\065\024\035\027\043\030\072\031\254\041\055\042" +
    "\074\060\u0189\067\071\071\054\072\066\073\073\074\042" +
    "\111\031\001\002\000\072\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\037\uffa5\041\uffa5\042\uffa5\060\uffa5\067\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\111\uffa5\001\002\000" +
    "\006\043\u018c\064\u018b\001\002\000\070\006\uffca\007\uffca" +
    "\010\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca\027\uffca" +
    "\030\uffca\031\uffca\037\uffca\041\uffca\042\uffca\060\uffca\067" +
    "\uffca\071\uffca\072\uffca\073\uffca\074\uffca\111\uffca\001\002" +
    "\000\004\075\u018d\001\002\000\006\064\u018e\065\u018f\001" +
    "\002\000\070\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\037\uffbd" +
    "\041\uffbd\042\uffbd\060\uffbd\067\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\074\uffbd\111\uffbd\001\002\000\004\075\u0190\001\002" +
    "\000\004\064\u0191\001\002\000\070\006\uffbc\007\uffbc\010" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\037\uffbc\041\uffbc\042\uffbc\060\uffbc\067\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\074\uffbc\111\uffbc\001\002\000" +
    "\006\043\u0194\064\u0193\001\002\000\070\006\uffcf\007\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\037\uffcf\041\uffcf\042\uffcf\060\uffcf\067" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\111\uffcf\001\002" +
    "\000\004\075\u0195\001\002\000\006\064\u0196\065\u0197\001" +
    "\002\000\070\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\037\uffc4" +
    "\041\uffc4\042\uffc4\060\uffc4\067\uffc4\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\111\uffc4\001\002\000\004\075\u0198\001\002" +
    "\000\004\064\u0199\001\002\000\070\006\uffc3\007\uffc3\010" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\037\uffc3\041\uffc3\042\uffc3\060\uffc3\067\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\111\uffc3\001\002\000" +
    "\004\005\u019b\001\002\000\004\067\u019c\001\002\000\004" +
    "\005\u019d\001\002\000\004\056\u019e\001\002\000\004\064" +
    "\u019f\001\002\000\070\006\uff5c\007\uff5c\010\uff5c\012\uff5c" +
    "\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c\021" +
    "\uff5c\023\uff5c\024\uff5c\025\uff5c\027\uff5c\030\uff5c\031\uff5c" +
    "\037\uff5c\041\uff5c\042\uff5c\060\uff5c\067\uff5c\071\uff5c\072" +
    "\uff5c\073\uff5c\074\uff5c\111\uff5c\001\002\000\004\055\u01a1" +
    "\001\002\000\004\056\u01a2\001\002\000\004\057\u01a3\001" +
    "\002\000\062\006\037\007\050\010\036\012\060\013\044" +
    "\014\052\015\046\016\034\017\075\020\051\021\057\023" +
    "\065\024\035\027\043\030\072\031\063\041\055\042\074" +
    "\067\071\071\054\072\066\073\073\074\042\111\031\001" +
    "\002\000\064\006\037\007\050\010\036\012\060\013\044" +
    "\014\052\015\046\016\034\017\075\020\051\021\057\023" +
    "\065\024\035\027\043\030\072\031\254\037\u01a5\041\055" +
    "\042\074\067\071\071\054\072\066\073\073\074\042\111" +
    "\031\001\002\000\006\067\u01a7\075\u01a6\001\002\000\004" +
    "\064\u01aa\001\002\000\004\064\u01a8\001\002\000\004\060" +
    "\u01a9\001\002\000\004\002\ufffe\001\002\000\004\060\u01ab" +
    "\001\002\000\004\002\000\001\002\000\004\057\u01ad\001" +
    "\002\000\032\006\037\007\050\015\046\016\034\017\075" +
    "\020\051\021\057\023\065\024\035\027\043\030\072\067" +
    "\071\001\002\000\034\006\037\007\050\015\046\016\034" +
    "\017\075\020\051\021\057\023\065\024\035\027\043\030" +
    "\072\060\u01b1\067\071\001\002\000\034\006\uffd2\007\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024" +
    "\uffd2\027\uffd2\030\uffd2\060\uffd2\067\uffd2\001\002\000\034" +
    "\006\uffd3\007\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3\060\uffd3\067\uffd3" +
    "\001\002\000\004\064\u01b2\001\002\000\014\015\uff79\030" +
    "\uff79\063\uff79\077\uff79\107\uff79\001\002\000\004\067\u01c1" +
    "\001\002\000\006\005\u01b5\102\u01b6\001\002\000\004\067" +
    "\u01bc\001\002\000\004\067\u01b7\001\002\000\006\065\u01b9" +
    "\103\u01b8\001\002\000\014\015\ufff2\030\ufff2\063\ufff2\077" +
    "\ufff2\107\ufff2\001\002\000\004\067\u01ba\001\002\000\004" +
    "\103\u01bb\001\002\000\014\015\ufff3\030\ufff3\063\ufff3\077" +
    "\ufff3\107\ufff3\001\002\000\006\005\u01bd\065\u01be\001\002" +
    "\000\014\015\ufff0\030\ufff0\063\ufff0\077\ufff0\107\ufff0\001" +
    "\002\000\004\067\u01bf\001\002\000\004\005\u01c0\001\002" +
    "\000\014\015\ufff1\030\ufff1\063\ufff1\077\ufff1\107\ufff1\001" +
    "\002\000\010\005\u01c3\070\u01c4\075\u01c2\001\002\000\016" +
    "\015\uff78\030\uff78\063\uff78\065\u01c9\077\uff78\107\uff78\001" +
    "\002\000\004\067\u01c7\001\002\000\004\067\u01c5\001\002" +
    "\000\004\070\u01c6\001\002\000\014\015\uff75\030\uff75\063" +
    "\uff75\077\uff75\107\uff75\001\002\000\004\005\u01c8\001\002" +
    "\000\014\015\uff76\030\uff76\063\uff76\077\uff76\107\uff76\001" +
    "\002\000\004\075\u01ca\001\002\000\014\015\uff77\030\uff77" +
    "\063\uff77\077\uff77\107\uff77\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c9\000\016\002\005\006\013\007\003\020\004\042" +
    "\010\050\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\024\007\017\020\020\050\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\037\004\063\010\046\011\031\014" +
    "\075\021\061\022\060\023\032\024\055\025\066\031\067" +
    "\032\040\035\044\051\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\254\010\246\011\241\014\257\021\252\022\251\023\243" +
    "\024\250\025\255\031\256\032\244\035\245\051\247\001" +
    "\001\000\002\001\001\000\006\026\u0161\043\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\344\045\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\211\047\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\141\030\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\240" +
    "\004\063\010\046\011\031\014\075\021\061\022\060\023" +
    "\032\024\055\025\066\031\067\032\040\035\044\051\052" +
    "\001\001\000\034\004\254\010\246\011\241\014\257\021" +
    "\252\022\251\023\243\024\250\025\255\031\256\032\244" +
    "\035\245\051\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\263" +
    "\004\063\010\046\011\031\014\075\021\061\022\060\023" +
    "\032\024\055\025\066\031\067\032\040\035\044\051\052" +
    "\001\001\000\034\004\254\010\246\011\241\014\257\021" +
    "\252\022\251\023\243\024\250\025\255\031\256\032\244" +
    "\035\245\051\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\326\037\327\001" +
    "\001\000\002\001\001\000\004\037\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\333\004\063\010\046\011\031\014\075\021\061\022\060" +
    "\023\032\024\055\025\066\031\067\032\040\035\044\051" +
    "\052\001\001\000\034\004\254\010\246\011\241\014\257" +
    "\021\252\022\251\023\243\024\250\025\255\031\256\032" +
    "\244\035\245\051\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\341\004\063\010\046\011\031\014\075\021\061\022\060" +
    "\023\032\024\055\025\066\031\067\032\040\035\044\051" +
    "\052\001\001\000\034\004\254\010\246\011\241\014\257" +
    "\021\252\022\251\023\243\024\250\025\255\031\256\032" +
    "\244\035\245\051\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\367\001\001\000\002\001\001\000\004\005" +
    "\371\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u0103\001\001\000\002\001\001\000\004\005" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u010a\001\001\000" +
    "\002\001\001\000\004\005\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0111\001\001\000\002\001\001\000\004\005\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0118\001\001\000\002" +
    "\001\001\000\004\005\u011a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u011f\001\001\000\002\001\001\000\004\005\u0121\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0124" +
    "\004\063\010\046\011\031\014\075\021\061\022\060\023" +
    "\032\024\055\025\066\031\067\032\040\035\044\051\052" +
    "\001\001\000\034\004\254\010\246\011\241\014\257\021" +
    "\252\022\251\023\243\024\250\025\255\031\256\032\244" +
    "\035\245\051\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u012a" +
    "\001\001\000\002\001\001\000\004\005\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u0131\001\001\000\002\001\001\000" +
    "\004\005\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u0152\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0155" +
    "\004\063\010\046\011\031\014\075\021\061\022\060\023" +
    "\032\024\055\025\066\031\067\032\040\035\044\051\052" +
    "\001\001\000\034\004\254\010\246\011\241\014\257\021" +
    "\252\022\251\023\243\024\250\025\255\031\256\032\244" +
    "\035\245\051\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u0164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\u0187\004\063" +
    "\010\046\011\031\014\075\021\061\022\060\023\032\024" +
    "\055\025\066\031\067\032\040\035\044\051\052\001\001" +
    "\000\034\004\254\010\246\011\241\014\257\021\252\022" +
    "\251\023\243\024\250\025\255\031\256\032\244\035\245" +
    "\051\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\u01a3\004\063\010\046\011" +
    "\031\014\075\021\061\022\060\023\032\024\055\025\066" +
    "\031\067\032\040\035\044\051\052\001\001\000\034\004" +
    "\254\010\246\011\241\014\257\021\252\022\251\023\243" +
    "\024\250\025\255\031\256\032\244\035\245\051\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\u01ae\041\u01ad" +
    "\001\001\000\004\004\u01af\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_FOR ::= Float Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_FOR ::= Short Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_FOR ::= Unsigned Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_FOR ::= Long Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_FOR ::= Double Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SYSTEM ::= System_r Parent_a Comillas Identificador Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SYSTEM",39, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SCANF_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_PARAM",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SCANF_PARAM ::= Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_PARAM",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SCANF_LIST ::= SCANF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_LIST",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SCANF_LIST ::= SCANF_LIST PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_LIST",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SCANF ::= Scanf SCANF_LIST Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // PRINTF_PARAM ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PRINTF_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PRINTF_PARAM ::= Comillas Identificador Comillas Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PRINTF_PARAM ::= Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PRINTF_LIST ::= PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_LIST",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PRINTF_LIST ::= PRINTF_LIST PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_LIST",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PRINTF ::= Printf PRINTF_LIST Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CIN_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_PARAM",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CIN_PARAM ::= Identificador Op_cin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_PARAM",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CIN_LIST ::= CIN_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_LIST",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CIN_LIST ::= CIN_LIST CIN_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_LIST",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CIN ::= Cin CIN_LIST P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // COUT_PARAM ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // COUT_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // COUT_PARAM ::= Comillas Identificador Comillas Op_cout 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COUT_PARAM ::= Identificador Op_cout 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COUT_LIST ::= COUT_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // COUT_LIST ::= COUT_LIST COUT_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // COUT ::= Cout COUT_LIST P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DEFINE ::= Numeral Define Identificador Comilla_simple Identificador Comilla_simple 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DEFINE ::= Numeral Define Identificador Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DEFINE ::= Numeral Define Identificador Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DEFINE ::= Numeral Define Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // STRUCT ::= Struct Identificador Llave_a DECLARACION_LIST Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_LIST_CASE ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIST_CASE",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_LIST_CASE ::= SENTENCIA_LIST_CASE SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIST_CASE",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_LIST_CASE Default Dos_puntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONST ::= Const T_dato Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONST ::= Const Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONST ::= Const Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONST ::= Const Char Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONST ::= Const Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONST ::= Const Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONST ::= Const Short Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONST ::= Const Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONST ::= Const Unsigned Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONST ::= Const Unsigned Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONST ::= Const Long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONST ::= Const Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONST ::= Const Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONST ::= Const Double Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONST ::= Const Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TYPEDEF ::= Typedef T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TYPEDEF ::= Typedef Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TYPEDEF ::= Typedef Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TYPEDEF ::= Typedef Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPEDEF ::= Typedef Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPEDEF ::= Typedef Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPEDEF ::= Typedef Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPEDEF ::= Typedef Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPEDEF ::= Typedef Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPEDEF ::= Typedef Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DO ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA ::= Identificador Menor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA ::= Identificador Mayor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA ::= Identificador Menor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA ::= Identificador Mayor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Identificador Punto Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Identificador Punto Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Identificador Punto Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Identificador Punto Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Struct Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Short Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Unsigned Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Unsigned Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Double Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Char Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_LIST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_LIST ::= DECLARACION_LIST DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= SENTENCIA SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= DO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA DO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INCLUDE ::= Numeral Include Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INCLUDE ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INCLUDE ::= Numeral Include Menor Identificador Mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INCLUDE ::= Numeral Include Menor Identificador Punto Identificador Mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // USING_NAMESPACE ::= Using Namespace Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("USING_NAMESPACE",38, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CABECERA ::= USING_NAMESPACE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABECERA ::= CABECERA USING_NAMESPACE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABECERA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= CABECERA STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= CABECERA DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= CABECERA INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CABECERA Main Parent_a Parent_c Llave_a SENTENCIA Return Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CABECERA Int Main Parent_a Parent_c Llave_a SENTENCIA Return Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CABECERA Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABECERA Int Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

