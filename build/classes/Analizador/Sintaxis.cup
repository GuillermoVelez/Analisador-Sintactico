package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Cadena, If, Else, Do, While, For, Int, Double, Bool,
    Float, Char, Const, Short, Unsigned, Break, Case, Long, Struct,
    Continue, Default, Enum, Extern, GoTo, Register, Return, Union, Switch,
    Typedef, Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parent_a, Parent_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Punto, Coma, Identificador,
    Printf, Scanf, Cin, Cout, Numero, ERROR, Numeral, Define, Include, Menor, Mayor;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, INCLUDE, DEFINE, IF, IF_ELSE, CASE,
    DEFAULT, DO, ENUM, GOTO, UNION, STRUCT, SWITCH, PRINTF, SCANF, CIN, COUT,
    WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, INCLUDES, TYPEDEF;

start with INICIO;

INICIO ::= 
    INCLUDES Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    INCLUDES Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
INCLUDES ::=
    INCLUDES INCLUDE |
    INCLUDE
;
INCLUDE ::=
    Numeral Include Menor Identificador Punto Identificador Mayor |
    Numeral Include Menor Identificador Mayor |
    Numeral Include Comillas Identificador Punto Identificador Comillas | 
    Numeral Include Comillas Identificador Comillas 
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA DO |
    DO |
    SENTENCIA TYPEDEF |
    TYPEDEF
;
DECLARACION ::= 
    Int Identificador P_coma |
    Char Identificador P_coma |
    Double Identificador P_coma |
    Float Identificador P_coma |
    Long Identificador P_coma |
    Cadena Identificador P_coma |
    Bool Identificador P_coma |
    Unsigned Identificador P_coma |
    Short Identificador P_coma |
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    T_dato Identificador Op_atribucion Numero Punto Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Igual Numero Punto Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;
IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c
;
IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;

SENTENCIA_BOOLEANA ::= 
    Identificador |
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Mayor Numero |
    Identificador Menor Numero |
    Identificador Mayor Identificador |
    Identificador Menor Identificador |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas 
;

WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
DO ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma
;
FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c
;
TYPEDEF ::= Typedef Int Identificador P_coma |
            Typedef Double Identificador P_coma  |
            Typedef Long Identificador  P_coma |
            Typedef Unsigned Identificador  P_coma |
            Typedef Short Identificador P_coma |
            Typedef Float Identificador  P_coma  |
            Typedef Char Identificador P_coma |
            Typedef Cadena Identificador  P_coma  |
            Typedef Bool Identificador  P_coma  |
            Typedef T_dato Identificador  P_coma  
;
SENTENCIA_FOR ::=
    Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Double Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Long Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Unsigned Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Short Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Float Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;
